// commands/cmdLeague.js
const { SlashCommandBuilder } = require('discord.js')
const { 
    ActionRowBuilder, 
    ButtonBuilder, 
    EmbedBuilder, 
    ButtonStyle, 
    StringSelectMenuBuilder, 
    UserSelectMenuBuilder, 
    ChannelSelectMenuBuilder,
    ChannelType,
    PermissionsBitField 
} = require('discord.js')

// Î¶¨Í∑∏ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•Ïö© (Î©îÎ™®Î¶¨ Í∏∞Î∞ò)
const leagueData = new Map()

/**
 * Í∏∏ÎìúÏùò Î¶¨Í∑∏ Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Í±∞ÎÇò Ï¥àÍ∏∞ÌôîÌïòÎäî Ìï®Ïàò
 * @param {string} guildId - Í∏∏Îìú ID
 * @returns {Object} - Î¶¨Í∑∏ Îç∞Ïù¥ÌÑ∞ Í∞ùÏ≤¥
 */
function getLeagueData(guildId) {
    if (!leagueData.has(guildId)) {
        leagueData.set(guildId, {
            teams: new Map(), // teamName -> { members: Set, score: number, voiceChannelId: string }
            teamCounter: 0
        })
    }
    return leagueData.get(guildId)
}

/**
 * Î©îÏù∏ Î©îÎâ¥ ÏûÑÎ≤†ÎìúÎ•º ÏÉùÏÑ±ÌïòÎäî Ìï®Ïàò
 * @param {string} guildName - Í∏∏Îìú Ïù¥Î¶Ñ
 * @returns {EmbedBuilder} - Î©îÏù∏ Î©îÎâ¥ ÏûÑÎ≤†Îìú
 */
function createMainMenuEmbed(guildName) {
    return new EmbedBuilder()
        .setColor(0x426cf5)
        .setTitle('üèÜ Î¶¨Í∑∏ Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú')
        .setDescription(`${guildName}Ïùò Î¶¨Í∑∏Î•º Í¥ÄÎ¶¨Ìï©ÎãàÎã§.`)
        .addFields(
            { name: 'üë• ÌåÄ Í¥ÄÎ¶¨', value: 'ÌåÄ ÏÉùÏÑ±, ÏÇ≠Ï†ú, Ï¥àÍ∏∞Ìôî', inline: true },
            { name: 'üìä Ï†êÏàò Í¥ÄÎ¶¨', value: 'Ï†êÏàò Ï∂îÍ∞Ä, Ï∞®Í∞ê', inline: true },
            { name: 'üîä ÌåÄ Ïù¥Îèô', value: 'ÏùåÏÑ±Ï±ÑÎÑêÎ°ú ÌåÄ Ïù¥Îèô', inline: true },
            { name: 'üìã ÌåÄ Î™©Î°ù', value: 'Î™®Îì† ÌåÄ Ï†ïÎ≥¥ ÌôïÏù∏', inline: true }
        )
        .setTimestamp()
}

/**
 * Î©îÏù∏ Î©îÎâ¥ Î≤ÑÌäºÏùÑ ÏÉùÏÑ±ÌïòÎäî Ìï®Ïàò
 * @returns {ActionRowBuilder} - Î©îÏù∏ Î©îÎâ¥ Î≤ÑÌäº
 */
function createMainMenuButtons() {
    return new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('team_management')
                .setLabel('üë• ÌåÄ Í¥ÄÎ¶¨')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('score_management')
                .setLabel('üìä Ï†êÏàò Í¥ÄÎ¶¨')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('team_movement')
                .setLabel('üîä ÌåÄ Ïù¥Îèô')
                .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
                .setCustomId('team_list')
                .setLabel('üìã ÌåÄ Î™©Î°ù')
                .setStyle(ButtonStyle.Secondary)
        )
}

/**
 * ÌåÄ Í¥ÄÎ¶¨ Î©îÎâ¥ ÏûÑÎ≤†ÎìúÎ•º ÏÉùÏÑ±ÌïòÎäî Ìï®Ïàò
 * @returns {EmbedBuilder} - ÌåÄ Í¥ÄÎ¶¨ Î©îÎâ¥ ÏûÑÎ≤†Îìú
 */
function createTeamManagementEmbed() {
    return new EmbedBuilder()
        .setColor(0x426cf5)
        .setTitle('üë• ÌåÄ Í¥ÄÎ¶¨')
        .setDescription('ÌåÄÏùÑ ÏÉùÏÑ±ÌïòÍ±∞ÎÇò ÏÇ≠Ï†úÌï† Ïàò ÏûàÏäµÎãàÎã§.')
        .addFields(
            { name: '‚ûï ÌåÄ ÏÉùÏÑ±', value: 'ÏÉàÎ°úÏö¥ ÌåÄÏùÑ ÎßåÎì≠ÎãàÎã§', inline: true },
            { name: '‚ùå ÌåÄ ÏÇ≠Ï†ú', value: 'Í∏∞Ï°¥ ÌåÄÏùÑ ÏÇ≠Ï†úÌï©ÎãàÎã§', inline: true },
            { name: 'üóëÔ∏è Ï†ÑÏ≤¥ Ï¥àÍ∏∞Ìôî', value: 'Î™®Îì† ÌåÄÏùÑ ÏÇ≠Ï†úÌï©ÎãàÎã§', inline: true }
        )
        .setTimestamp()
}

/**
 * ÌåÄ Í¥ÄÎ¶¨ Î©îÎâ¥ Î≤ÑÌäºÏùÑ ÏÉùÏÑ±ÌïòÎäî Ìï®Ïàò
 * @returns {ActionRowBuilder} - ÌåÄ Í¥ÄÎ¶¨ Î©îÎâ¥ Î≤ÑÌäº
 */
function createTeamManagementButtons() {
    return new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('create_team')
                .setLabel('‚ûï ÌåÄ ÏÉùÏÑ±')
                .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
                .setCustomId('delete_team')
                .setLabel('‚ùå ÌåÄ ÏÇ≠Ï†ú')
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId('reset_all_teams')
                .setLabel('üóëÔ∏è Ï†ÑÏ≤¥ Ï¥àÍ∏∞Ìôî')
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId('back_to_main')
                .setLabel('üîô Î©îÏù∏ÏúºÎ°ú')
                .setStyle(ButtonStyle.Secondary)
        )
}

/**
 * ÌåÄ Î™©Î°ù ÏûÑÎ≤†ÎìúÎ•º ÏÉùÏÑ±ÌïòÎäî Ìï®Ïàò
 * @param {Map} teams - ÌåÄ Îç∞Ïù¥ÌÑ∞
 * @returns {EmbedBuilder} - ÌåÄ Î™©Î°ù ÏûÑÎ≤†Îìú
 */
function createTeamListEmbed(teams) {
    const embed = new EmbedBuilder()
        .setColor(0x426cf5)
        .setTitle('üìã ÌåÄ Î™©Î°ù')
        .setTimestamp()

    if (teams.size === 0) {
        embed.setDescription('Îì±Î°ùÎêú ÌåÄÏù¥ ÏóÜÏäµÎãàÎã§.')
        return embed
    }

    let description = ''
    teams.forEach((teamData, teamName) => {
        const memberList = Array.from(teamData.members).map(userId => `<@${userId}>`).join(', ')
        const voiceChannel = teamData.voiceChannelId ? `<#${teamData.voiceChannelId}>` : 'ÏÑ§Ï†ï ÏïàÎê®'
        description += `**${teamName}** (Ï†êÏàò: ${teamData.score})\n`
        description += `Î©§Î≤Ñ: ${memberList || 'ÏóÜÏùå'}\n`
        description += `ÏùåÏÑ±Ï±ÑÎÑê: ${voiceChannel}\n\n`
    })

    embed.setDescription(description)
    return embed
}

/**
 * Ï†êÏàò Í¥ÄÎ¶¨ Î©îÎâ¥ ÏûÑÎ≤†ÎìúÎ•º ÏÉùÏÑ±ÌïòÎäî Ìï®Ïàò
 * @param {Map} teams - ÌåÄ Îç∞Ïù¥ÌÑ∞
 * @returns {EmbedBuilder} - Ï†êÏàò Í¥ÄÎ¶¨ Î©îÎâ¥ ÏûÑÎ≤†Îìú
 */
function createScoreManagementEmbed(teams) {
    const embed = new EmbedBuilder()
        .setColor(0x426cf5)
        .setTitle('üìä Ï†êÏàò Í¥ÄÎ¶¨')
        .setDescription('ÌåÄÏùò Ï†êÏàòÎ•º Ï∂îÍ∞ÄÌïòÍ±∞ÎÇò Ï∞®Í∞êÌï† Ïàò ÏûàÏäµÎãàÎã§.')
        .setTimestamp()

    if (teams.size === 0) {
        embed.addFields({ name: '‚ö†Ô∏è ÏïåÎ¶º', value: 'Îì±Î°ùÎêú ÌåÄÏù¥ ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä ÌåÄÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.' })
        return embed
    }

    let scoreInfo = ''
    teams.forEach((teamData, teamName) => {
        scoreInfo += `**${teamName}**: ${teamData.score}Ï†ê\n`
    })

    embed.addFields({ name: 'ÌòÑÏû¨ Ï†êÏàò', value: scoreInfo })
    return embed
}

/**
 * Ï†êÏàò Í¥ÄÎ¶¨ Î©îÎâ¥ Î≤ÑÌäºÏùÑ ÏÉùÏÑ±ÌïòÎäî Ìï®Ïàò
 * @param {Map} teams - ÌåÄ Îç∞Ïù¥ÌÑ∞
 * @returns {ActionRowBuilder} - Ï†êÏàò Í¥ÄÎ¶¨ Î©îÎâ¥ Î≤ÑÌäº
 */
function createScoreManagementButtons(teams) {
    const row = new ActionRowBuilder()
    
    if (teams.size > 0) {
        row.addComponents(
            new ButtonBuilder()
                .setCustomId('add_score')
                .setLabel('‚ûï Ï†êÏàò Ï∂îÍ∞Ä')
                .setStyle(ButtonStyle.Success),
            new ButtonBuilder()
                .setCustomId('subtract_score')
                .setLabel('‚ûñ Ï†êÏàò Ï∞®Í∞ê')
                .setStyle(ButtonStyle.Danger)
        )
    }

    row.addComponents(
        new ButtonBuilder()
            .setCustomId('back_to_main')
            .setLabel('üîô Î©îÏù∏ÏúºÎ°ú')
            .setStyle(ButtonStyle.Secondary)
    )

    return row
}

/**
 * ÌåÄ ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥ÏùÑ ÏÉùÏÑ±ÌïòÎäî Ìï®Ïàò
 * @param {Map} teams - ÌåÄ Îç∞Ïù¥ÌÑ∞
 * @param {string} customId - Ïª§Ïä§ÌÖÄ ID
 * @param {string} placeholder - ÌîåÎ†àÏù¥Ïä§ÌôÄÎçî ÌÖçÏä§Ìä∏
 * @returns {ActionRowBuilder} - ÌåÄ ÏÑ†ÌÉù ÎìúÎ°≠Îã§Ïö¥
 */
function createTeamSelectMenu(teams, customId, placeholder) {
    const options = Array.from(teams.keys()).map(teamName => ({
        label: teamName,
        value: teamName,
        description: `Ï†êÏàò: ${teams.get(teamName).score}Ï†ê`
    }))

    return new ActionRowBuilder()
        .addComponents(
            new StringSelectMenuBuilder()
                .setCustomId(customId)
                .setPlaceholder(placeholder)
                .addOptions(options)
        )
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('Î¶¨Í∑∏')
        .setDescription('Î¶¨Í∑∏Ïö© Ïª§Îß®ÎìúÏûÖÎãàÎã§.'),
    
    /**
     * Î¶¨Í∑∏ Ïª§Îß®Îìú Ïã§Ìñâ Ìï®Ïàò
     * @param {import('discord.js').CommandInteraction} interaction - Ïª§Îß®Îìú ÏÉÅÌò∏ÏûëÏö©
     */
    async execute(interaction) {
        const guildData = getLeagueData(interaction.guild.id)
        const embed = createMainMenuEmbed(interaction.guild.name)
        const buttons = createMainMenuButtons()

        await interaction.reply({ 
            embeds: [embed], 
            components: [buttons],
            ephemeral: false
        })

        // Ïª¥Ìè¨ÎÑåÌä∏ ÏÉÅÌò∏ÏûëÏö© Ï≤òÎ¶¨
        const filter = i => i.user.id === interaction.user.id
        const collector = interaction.channel.createMessageComponentCollector({ 
            filter, 
            time: 300000 // 5Î∂Ñ
        })

        collector.on('collect', async i => {
            const guildData = getLeagueData(interaction.guild.id)

            try {
                if (i.customId === 'team_management') {
                    const embed = createTeamManagementEmbed()
                    const buttons = createTeamManagementButtons()
                    await i.update({ embeds: [embed], components: [buttons] })

                } else if (i.customId === 'team_list') {
                    const embed = createTeamListEmbed(guildData.teams)
                    const backButton = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId('back_to_main')
                                .setLabel('üîô Î©îÏù∏ÏúºÎ°ú')
                                .setStyle(ButtonStyle.Secondary)
                        )
                    await i.update({ embeds: [embed], components: [backButton] })

                } else if (i.customId === 'score_management') {
                    const embed = createScoreManagementEmbed(guildData.teams)
                    const buttons = createScoreManagementButtons(guildData.teams)
                    await i.update({ embeds: [embed], components: [buttons] })

                } else if (i.customId === 'team_movement') {
                    if (guildData.teams.size === 0) {
                        const embed = new EmbedBuilder()
                            .setColor(0xff0000)
                            .setTitle('‚ö†Ô∏è Ïò§Î•ò')
                            .setDescription('Ïù¥ÎèôÌï† ÌåÄÏù¥ ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä ÌåÄÏùÑ ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.')
                        await i.update({ embeds: [embed], components: [createMainMenuButtons()] })
                        return
                    }

                    const embed = new EmbedBuilder()
                        .setColor(0x426cf5)
                        .setTitle('üîä ÌåÄ Ïù¥Îèô')
                        .setDescription('Ïù¥ÎèôÌï† ÌåÄÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.')

                    const teamSelect = createTeamSelectMenu(guildData.teams, 'move_team_select', 'Ïù¥ÎèôÌï† ÌåÄ ÏÑ†ÌÉù')
                    const backButton = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId('back_to_main')
                                .setLabel('üîô Î©îÏù∏ÏúºÎ°ú')
                                .setStyle(ButtonStyle.Secondary)
                        )

                    await i.update({ embeds: [embed], components: [teamSelect, backButton] })

                } else if (i.customId === 'create_team') {
                    const embed = new EmbedBuilder()
                        .setColor(0x426cf5)
                        .setTitle('‚ûï ÌåÄ ÏÉùÏÑ±')
                        .setDescription('ÏÉàÎ°úÏö¥ ÌåÄÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§. ÌåÄ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
                        .addFields(
                            { name: 'üìù ÏûÖÎ†• Î∞©Î≤ï', value: 'Ï±ÑÌåÖÏ∞ΩÏóê ÌåÄ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî. (Ïòà: ÌåÄA, Î∏îÎ£®ÌåÄ)' }
                        )

                    await i.update({ embeds: [embed], components: [] })

                    // Î©îÏãúÏßÄ ÏàòÏßëÍ∏∞Î°ú ÌåÄ Ïù¥Î¶Ñ ÏûÖÎ†• Î∞õÍ∏∞
                    const messageFilter = m => m.author.id === i.user.id
                    const messageCollector = interaction.channel.createMessageCollector({ 
                        filter: messageFilter, 
                        time: 30000, 
                        max: 1 
                    })

                    messageCollector.on('collect', async m => {
                        const teamName = m.content.trim()
                        
                        if (guildData.teams.has(teamName)) {
                            const errorEmbed = new EmbedBuilder()
                                .setColor(0xff0000)
                                .setTitle('‚ö†Ô∏è Ïò§Î•ò')
                                .setDescription(`Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî ÌåÄ Ïù¥Î¶ÑÏûÖÎãàÎã§: ${teamName}`)
                            
                            await m.delete().catch(() => {})
                            await interaction.editReply({ embeds: [errorEmbed], components: [createTeamManagementButtons()] })
                            return
                        }

                        // ÌåÄ ÏÉùÏÑ±
                        guildData.teams.set(teamName, {
                            members: new Set(),
                            score: 0,
                            voiceChannelId: null
                        })

                        const successEmbed = new EmbedBuilder()
                            .setColor(0x00ff00)
                            .setTitle('‚úÖ ÌåÄ ÏÉùÏÑ± ÏôÑÎ£å')
                            .setDescription(`ÌåÄ "${teamName}"Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!`)
                            .addFields(
                                { name: 'Îã§Ïùå Îã®Í≥Ñ', value: 'ÌåÄÏõêÏùÑ Ï∂îÍ∞ÄÌïòÍ≥† ÏùåÏÑ±Ï±ÑÎÑêÏùÑ ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.' }
                            )

                        const userSelect = new ActionRowBuilder()
                            .addComponents(
                                new UserSelectMenuBuilder()
                                    .setCustomId(`add_members_${teamName}`)
                                    .setPlaceholder('ÌåÄÏõê ÏÑ†ÌÉù (ÏµúÎåÄ 25Î™Ö)')
                                    .setMinValues(1)
                                    .setMaxValues(25)
                            )

                        const channelSelect = new ActionRowBuilder()
                            .addComponents(
                                new ChannelSelectMenuBuilder()
                                    .setCustomId(`set_voice_channel_${teamName}`)
                                    .setPlaceholder('ÏùåÏÑ±Ï±ÑÎÑê ÏÑ†ÌÉù')
                                    .addChannelTypes(ChannelType.GuildVoice)
                            )

                        const backButton = new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId('team_management')
                                    .setLabel('üîô ÌåÄ Í¥ÄÎ¶¨Î°ú')
                                    .setStyle(ButtonStyle.Secondary)
                            )

                        await m.delete().catch(() => {})
                        await interaction.editReply({ 
                            embeds: [successEmbed], 
                            components: [userSelect, channelSelect, backButton] 
                        })
                    })

                } else if (i.customId === 'delete_team') {
                    if (guildData.teams.size === 0) {
                        const embed = new EmbedBuilder()
                            .setColor(0xff0000)
                            .setTitle('‚ö†Ô∏è Ïò§Î•ò')
                            .setDescription('ÏÇ≠Ï†úÌï† ÌåÄÏù¥ ÏóÜÏäµÎãàÎã§.')
                        await i.update({ embeds: [embed], components: [createTeamManagementButtons()] })
                        return
                    }

                    const embed = new EmbedBuilder()
                        .setColor(0xff0000)
                        .setTitle('‚ùå ÌåÄ ÏÇ≠Ï†ú')
                        .setDescription('ÏÇ≠Ï†úÌï† ÌåÄÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.')

                    const teamSelect = createTeamSelectMenu(guildData.teams, 'delete_team_confirm', 'ÏÇ≠Ï†úÌï† ÌåÄ ÏÑ†ÌÉù')
                    const backButton = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId('team_management')
                                .setLabel('üîô ÌåÄ Í¥ÄÎ¶¨Î°ú')
                                .setStyle(ButtonStyle.Secondary)
                        )

                    await i.update({ embeds: [embed], components: [teamSelect, backButton] })

                } else if (i.customId === 'reset_all_teams') {
                    const embed = new EmbedBuilder()
                        .setColor(0xff0000)
                        .setTitle('üóëÔ∏è Ï†ÑÏ≤¥ Ï¥àÍ∏∞Ìôî')
                        .setDescription('Ï†ïÎßêÎ°ú Î™®Îì† ÌåÄÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n**Ïù¥ ÏûëÏóÖÏùÄ ÎêòÎèåÎ¶¥ Ïàò ÏóÜÏäµÎãàÎã§.**')

                    const confirmButtons = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId('confirm_reset_all')
                                .setLabel('‚úÖ ÌôïÏù∏')
                                .setStyle(ButtonStyle.Danger),
                            new ButtonBuilder()
                                .setCustomId('team_management')
                                .setLabel('‚ùå Ï∑®ÏÜå')
                                .setStyle(ButtonStyle.Secondary)
                        )

                    await i.update({ embeds: [embed], components: [confirmButtons] })

                } else if (i.customId === 'confirm_reset_all') {
                    guildData.teams.clear()
                    guildData.teamCounter = 0

                    const embed = new EmbedBuilder()
                        .setColor(0x00ff00)
                        .setTitle('‚úÖ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å')
                        .setDescription('Î™®Îì† ÌåÄÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.')

                    await i.update({ embeds: [embed], components: [createTeamManagementButtons()] })

                } else if (i.customId === 'add_score') {
                    const embed = new EmbedBuilder()
                        .setColor(0x426cf5)
                        .setTitle('‚ûï Ï†êÏàò Ï∂îÍ∞Ä')
                        .setDescription('Ï†êÏàòÎ•º Ï∂îÍ∞ÄÌï† ÌåÄÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.')

                    const teamSelect = createTeamSelectMenu(guildData.teams, 'add_score_team_select', 'Ï†êÏàòÎ•º Ï∂îÍ∞ÄÌï† ÌåÄ ÏÑ†ÌÉù')
                    const backButton = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId('score_management')
                                .setLabel('üîô Ï†êÏàò Í¥ÄÎ¶¨Î°ú')
                                .setStyle(ButtonStyle.Secondary)
                        )

                    await i.update({ embeds: [embed], components: [teamSelect, backButton] })

                } else if (i.customId === 'subtract_score') {
                    const embed = new EmbedBuilder()
                        .setColor(0x426cf5)
                        .setTitle('‚ûñ Ï†êÏàò Ï∞®Í∞ê')
                        .setDescription('Ï†êÏàòÎ•º Ï∞®Í∞êÌï† ÌåÄÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.')

                    const teamSelect = createTeamSelectMenu(guildData.teams, 'subtract_score_team_select', 'Ï†êÏàòÎ•º Ï∞®Í∞êÌï† ÌåÄ ÏÑ†ÌÉù')
                    const backButton = new ActionRowBuilder()
                        .addComponents(
                            new ButtonBuilder()
                                .setCustomId('score_management')
                                .setLabel('üîô Ï†êÏàò Í¥ÄÎ¶¨Î°ú')
                                .setStyle(ButtonStyle.Secondary)
                        )

                    await i.update({ embeds: [embed], components: [teamSelect, backButton] })

                } else if (i.customId === 'back_to_main') {
                    const embed = createMainMenuEmbed(interaction.guild.name)
                    const buttons = createMainMenuButtons()
                    await i.update({ embeds: [embed], components: [buttons] })

                } else if (i.isStringSelectMenu()) {
                    // ÎìúÎ°≠Îã§Ïö¥ Î©îÎâ¥ Ï≤òÎ¶¨
                    const selectedValue = i.values[0]

                    if (i.customId === 'delete_team_confirm') {
                        guildData.teams.delete(selectedValue)

                        const embed = new EmbedBuilder()
                            .setColor(0x00ff00)
                            .setTitle('‚úÖ ÌåÄ ÏÇ≠Ï†ú ÏôÑÎ£å')
                            .setDescription(`ÌåÄ "${selectedValue}"Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`)

                        await i.update({ embeds: [embed], components: [createTeamManagementButtons()] })

                    } else if (i.customId === 'add_score_team_select') {
                        const embed = new EmbedBuilder()
                            .setColor(0x426cf5)
                            .setTitle('‚ûï Ï†êÏàò Ï∂îÍ∞Ä')
                            .setDescription(`ÌåÄ "${selectedValue}"Ïóê Ï∂îÍ∞ÄÌï† Ï†êÏàòÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.`)
                            .addFields(
                                { name: 'üìù ÏûÖÎ†• Î∞©Î≤ï', value: 'Ï±ÑÌåÖÏ∞ΩÏóê Ïà´ÏûêÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî. (Ïòà: 1, 5, 10)' }
                            )

                        await i.update({ embeds: [embed], components: [] })

                        // Ï†êÏàò ÏûÖÎ†• Î∞õÍ∏∞
                        const messageFilter = m => m.author.id === i.user.id
                        const messageCollector = interaction.channel.createMessageCollector({ 
                            filter: messageFilter, 
                            time: 30000, 
                            max: 1 
                        })

                        messageCollector.on('collect', async m => {
                            const score = parseInt(m.content.trim())
                            
                            if (isNaN(score)) {
                                const errorEmbed = new EmbedBuilder()
                                    .setColor(0xff0000)
                                    .setTitle('‚ö†Ô∏è Ïò§Î•ò')
                                    .setDescription('Ïò¨Î∞îÎ•∏ Ïà´ÏûêÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
                                
                                await m.delete().catch(() => {})
                                await interaction.editReply({ embeds: [errorEmbed], components: [createScoreManagementButtons(guildData.teams)] })
                                return
                            }

                            guildData.teams.get(selectedValue).score += score

                            const successEmbed = new EmbedBuilder()
                                .setColor(0x00ff00)
                                .setTitle('‚úÖ Ï†êÏàò Ï∂îÍ∞Ä ÏôÑÎ£å')
                                .setDescription(`ÌåÄ "${selectedValue}"Ïóê ${score}Ï†êÏùÑ Ï∂îÍ∞ÄÌñàÏäµÎãàÎã§.`)
                                .addFields(
                                    { name: 'ÌòÑÏû¨ Ï†êÏàò', value: `${guildData.teams.get(selectedValue).score}Ï†ê` }
                                )

                            await m.delete().catch(() => {})
                            await interaction.editReply({ embeds: [successEmbed], components: [createScoreManagementButtons(guildData.teams)] })
                        })

                    } else if (i.customId === 'subtract_score_team_select') {
                        const embed = new EmbedBuilder()
                            .setColor(0x426cf5)
                            .setTitle('‚ûñ Ï†êÏàò Ï∞®Í∞ê')
                            .setDescription(`ÌåÄ "${selectedValue}"ÏóêÏÑú Ï∞®Í∞êÌï† Ï†êÏàòÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî.`)
                            .addFields(
                                { name: 'üìù ÏûÖÎ†• Î∞©Î≤ï', value: 'Ï±ÑÌåÖÏ∞ΩÏóê Ïà´ÏûêÎ•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî. (Ïòà: 1, 5, 10)' }
                            )

                        await i.update({ embeds: [embed], components: [] })

                        // Ï†êÏàò ÏûÖÎ†• Î∞õÍ∏∞
                        const messageFilter = m => m.author.id === i.user.id
                        const messageCollector = interaction.channel.createMessageCollector({ 
                            filter: messageFilter, 
                            time: 30000, 
                            max: 1 
                        })

                        messageCollector.on('collect', async m => {
                            const score = parseInt(m.content.trim())
                            
                            if (isNaN(score)) {
                                const errorEmbed = new EmbedBuilder()
                                    .setColor(0xff0000)
                                    .setTitle('‚ö†Ô∏è Ïò§Î•ò')
                                    .setDescription('Ïò¨Î∞îÎ•∏ Ïà´ÏûêÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.')
                                
                                await m.delete().catch(() => {})
                                await interaction.editReply({ embeds: [errorEmbed], components: [createScoreManagementButtons(guildData.teams)] })
                                return
                            }

                            guildData.teams.get(selectedValue).score -= score

                            const successEmbed = new EmbedBuilder()
                                .setColor(0x00ff00)
                                .setTitle('‚úÖ Ï†êÏàò Ï∞®Í∞ê ÏôÑÎ£å')
                                .setDescription(`ÌåÄ "${selectedValue}"ÏóêÏÑú ${score}Ï†êÏùÑ Ï∞®Í∞êÌñàÏäµÎãàÎã§.`)
                                .addFields(
                                    { name: 'ÌòÑÏû¨ Ï†êÏàò', value: `${guildData.teams.get(selectedValue).score}Ï†ê` }
                                )

                            await m.delete().catch(() => {})
                            await interaction.editReply({ embeds: [successEmbed], components: [createScoreManagementButtons(guildData.teams)] })
                        })

                    } else if (i.customId === 'move_team_select') {
                        const teamData = guildData.teams.get(selectedValue)
                        
                        if (!teamData.voiceChannelId) {
                            const embed = new EmbedBuilder()
                                .setColor(0xff0000)
                                .setTitle('‚ö†Ô∏è Ïò§Î•ò')
                                .setDescription(`ÌåÄ "${selectedValue}"Ïóê ÏùåÏÑ±Ï±ÑÎÑêÏù¥ ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.`)
                            
                            await i.update({ embeds: [embed], components: [createMainMenuButtons()] })
                            return
                        }

                        // Í¥ÄÎ¶¨Ïûê Í∂åÌïú ÌôïÏù∏
                        if (!i.member.permissions.has(PermissionsBitField.Flags.MoveMembers)) {
                            const embed = new EmbedBuilder()
                                .setColor(0xff0000)
                                .setTitle('‚ö†Ô∏è Í∂åÌïú Î∂ÄÏ°±')
                                .setDescription('Î©§Î≤Ñ Ïù¥Îèô Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.')
                            
                            await i.update({ embeds: [embed], components: [createMainMenuButtons()] })
                            return
                        }

                        const targetChannel = i.guild.channels.cache.get(teamData.voiceChannelId)
                        
                        if (!targetChannel) {
                            const embed = new EmbedBuilder()
                                .setColor(0xff0000)
                                .setTitle('‚ö†Ô∏è Ïò§Î•ò')
                                .setDescription('ÏÑ§Ï†ïÎêú ÏùåÏÑ±Ï±ÑÎÑêÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.')
                            
                            await i.update({ embeds: [embed], components: [createMainMenuButtons()] })
                            return
                        }

                        let movedCount = 0
                        let errorCount = 0

                        for (const memberId of teamData.members) {
                            try {
                                const member = await i.guild.members.fetch(memberId)
                                if (member.voice.channel) {
                                    await member.voice.setChannel(targetChannel)
                                    movedCount++
                                }
                            } catch (error) {
                                errorCount++
                            }
                        }

                        const embed = new EmbedBuilder()
                            .setColor(movedCount > 0 ? 0x00ff00 : 0xff0000)
                            .setTitle('üîä ÌåÄ Ïù¥Îèô Í≤∞Í≥º')
                            .setDescription(`ÌåÄ "${selectedValue}" Ïù¥Îèô ÏôÑÎ£å`)
                            .addFields(
                                { name: 'Ïù¥ÎèôÎêú Î©§Î≤Ñ', value: `${movedCount}Î™Ö`, inline: true },
                                { name: 'Ïù¥Îèô Ïã§Ìå®', value: `${errorCount}Î™Ö`, inline: true },
                                { name: 'ÎåÄÏÉÅ Ï±ÑÎÑê', value: `<#${teamData.voiceChannelId}>`, inline: true }
                            )

                        await i.update({ embeds: [embed], components: [createMainMenuButtons()] })
                    }

                } else if (i.isUserSelectMenu()) {
                    // ÏÇ¨Ïö©Ïûê ÏÑ†ÌÉù Î©îÎâ¥ Ï≤òÎ¶¨
                    const teamName = i.customId.replace('add_members_', '')
                    const selectedUsers = i.values
                    
                    if (guildData.teams.has(teamName)) {
                        const teamData = guildData.teams.get(teamName)
                        selectedUsers.forEach(userId => teamData.members.add(userId))

                        const embed = new EmbedBuilder()
                            .setColor(0x00ff00)
                            .setTitle('‚úÖ ÌåÄÏõê Ï∂îÍ∞Ä ÏôÑÎ£å')
                            .setDescription(`ÌåÄ "${teamName}"Ïóê ${selectedUsers.length}Î™ÖÏùò Î©§Î≤ÑÍ∞Ä Ï∂îÍ∞ÄÎêòÏóàÏäµÎãàÎã§.`)
                            .addFields(
                                { name: 'Ï∂îÍ∞ÄÎêú Î©§Î≤Ñ', value: selectedUsers.map(id => `<@${id}>`).join(', ') }
                            )

                        await i.update({ embeds: [embed], components: [createTeamManagementButtons()] })
                    }

                } else if (i.isChannelSelectMenu()) {
                    // Ï±ÑÎÑê ÏÑ†ÌÉù Î©îÎâ¥ Ï≤òÎ¶¨
                    const teamName = i.customId.replace('set_voice_channel_', '')
                    const selectedChannelId = i.values[0]
                    
                    if (guildData.teams.has(teamName)) {
                        const teamData = guildData.teams.get(teamName)
                        teamData.voiceChannelId = selectedChannelId

                        const embed = new EmbedBuilder()
                            .setColor(0x00ff00)
                            .setTitle('‚úÖ ÏùåÏÑ±Ï±ÑÎÑê ÏÑ§Ï†ï ÏôÑÎ£å')
                            .setDescription(`ÌåÄ "${teamName}"Ïùò ÏùåÏÑ±Ï±ÑÎÑêÏù¥ ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§.`)
                            .addFields(
                                { name: 'ÏÑ§Ï†ïÎêú Ï±ÑÎÑê', value: `<#${selectedChannelId}>` }
                            )

                        await i.update({ embeds: [embed], components: [createTeamManagementButtons()] })
                    }
                }

            } catch (error) {
                console.error('Error handling interaction:', error)
                
                const errorEmbed = new EmbedBuilder()
                    .setColor(0xff0000)
                    .setTitle('‚ö†Ô∏è Ïò§Î•ò Î∞úÏÉù')
                    .setDescription('Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.')

                if (!i.replied && !i.deferred) {
                    await i.reply({ embeds: [errorEmbed], ephemeral: true })
                } else {
                    await i.followUp({ embeds: [errorEmbed], ephemeral: true })
                }
            }
        })

        collector.on('end', () => {
            // ÏãúÍ∞Ñ Ï¥àÍ≥º Ïãú Î≤ÑÌäº ÎπÑÌôúÏÑ±Ìôî
            const expiredEmbed = new EmbedBuilder()
                .setColor(0x808080)
                .setTitle('‚è∞ ÏãúÍ∞Ñ Ï¥àÍ≥º')
                .setDescription('ÏÉÅÌò∏ÏûëÏö© ÏãúÍ∞ÑÏù¥ ÎßåÎ£åÎêòÏóàÏäµÎãàÎã§. Îã§Ïãú Î™ÖÎ†πÏñ¥Î•º Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî.')

            interaction.editReply({ embeds: [expiredEmbed], components: [] }).catch(() => {})
        })
    }
}
